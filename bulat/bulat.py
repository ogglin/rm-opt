import re

import utils

from .config import *

colors = {
    'B': 'Black',
    'C': 'Cyan',
    'M': 'Magenta',
    'Y': 'Yellow',
}

colors_full = {
    'Black': 'Black',
    'Cyan': 'Cyan',
    'Magenta': 'Magenta',
    'Yellow': 'Yellow',
}

cats = {
    'РЕСУРСНЫЕ ДЕТАЛИ ДЛЯ ВОССТАНОВЛЕНИЯ КАРТРИДЖЕЙ': 'ЗИП для картриджей',
    'ЧИПЫ': 'ЗИП для картриджей',
    'КОМПЛЕКТУЮЩИЕ ДЛЯ КАРТРИДЖЕЙ': 'ЗИП для картриджей',
    'ТЕРМОУЗЛЫ И ИХ КОМПЛЕКТУЮЩИЕ': 'ЗИП для оргтехники',
    'РЕМКОМПЛЕКТЫ': 'ЗИП для оргтехники',
    'БЛОКИ ПЕРЕНОСА ИЗОБРАЖЕНИЯ И ИХ КОМПЛЕКТУЮЩИЕ': 'ЗИП для оргтехники',
    'ЗИП': 'ЗИП для оргтехники',
    'ПРИНАДЛЕЖНОСТИ ДЛЯ СЕРВИСА': 'ЗИП для оргтехники',
    'КАРТРИДЖИ': 'Совместимые картриджи (Аналог)',
    'БУНКЕРА ДЛЯ ОТРАБОТАННОГО ТОНЕРА': 'Совместимые картриджи (Аналог)',
    'ТОНЕРЫ ДЛЯ БИЗНЕСА': 'Тонер и девелоперы',
    'ТОНЕРЫ И ДЕВЕЛОПЕРЫ ДЛЯ СЕРВИСА': 'Тонер и девелоперы',
}

types = {
    'Тонер-картридж': ['Тонер-картридж'],
    'Шестерня': ['Шестерня', 'Набор шест', 'Набор шестерен'],
    'Ролик': ['Ремкомплект ADF', 'Ролик захвата бумаги', 'Набор роликов захвата бумаги + сепарационная площадка',
              'Ролик п/б', 'Ролик захв/б', 'Ремкомплект ADF', 'Комплект роликов', ' Ролики подачи', 'Насадка на ролик',
              'Ролик п/б', 'Набор рол', 'Насадка на рол', 'Рол захв/б', 'Набор насадок', 'Насадка резиновая',
              'Основание ролика', 'Ролик дуплекса', 'Ролик протяжки'],
    'Флажок': ['Флажок'],
    'Тормозная площадка': ['Ролик отделения бумаги', 'Сепарационная пл', 'Сепарационная площадка', 'Сепарац. пл.',
                           'Тормозная пл.', 'Отделительная площадка', 'Ролик отд/б', 'Накладка сепарационной',
                           'Сеп пл', 'Пластиковая накладка'],
    'Муфта': ['Муфта', 'Механическая муфта'],
    'Вал переноса': ['Вал переноса'],
    'Ось': ['Ось'],
    'Узел': '[Узел]',
    'Лапка отделения': ['Лапка отделения'],
    'Термопрерыватель': ['Термопрерыватель'],
    'Термистор': ['Термистор'],
    'Кулачок': ['Кулачок'],
    'Держатель': ['Держатель', 'Направляющая держатель'],
    'Шлейф': ['Шлейф'],
    'Пружина': ['Пружина'],
    'Ремень': ['Ремень'],
    'Бумага': ['Бумага'],
    'Фильтр': ['Фильтр'],
    'Педаль': ['Педаль'],
    'Шланг': ['Шланг'],
    'Клапан': ['Клапан'],
    'Перчатки': ['Перчатки'],
    'Тестовая таблица': ['Тестовая таблица'],
    'Воронка': ['Воронка'],
    'Двухсторонний скотч': ['Двухсторонний скотч'],
    'Пылесос': ['Пылесос'],
    'Фьюзерное масло': ['Фьюзерное масло'],
    'Смазка для термопленки': ['Смазка для термопленки'],
    'Средство для чистки': ['Средство для чистки', 'Средство для восстан'],
    'Сжатый газ': ['Сжатый газ'],
    'Салфетки': ['Салфетки'],
    'Крышка': ['Задняя левая крышка', 'Задняя правая крышка', 'Левая крышка', 'Задняя крышка', 'Передняя крышка',
               'Верхняя крышка', 'Правая крышка', 'Задняя крышка'],
    'Плата': ['Плата', 'Высоковольтная плата', 'Плата со светодиодами', 'Плата форматирования'],
    'Двигатель': ['Двигатель'],
    'Вентилятор': ['Вентилятор'],
    'Лоток': ['Лоток'],
    'Блок лазера': ['Блок лазера'],
    'Ракель': ['Ракель'],
    'Лента переноса': ['Лента переноса', 'Блок переноса изображения'],
    'Ремкомплект': ['Ремкомплект', 'Ремонтный комплект'],
    'Термопленка': ['Термопленка'],
    'Термоэлемент': ['Термоэлемент'],
    'Лампа': ['Лампа'],
    'Втулка': ['Комплект втулок', 'Втулка теф/в', 'Втулка рез/в'],
    'Подшипник': ['Подшипник', 'Подшипн', 'Вт рез/в', 'Вт рез/в,', 'Бушинг', 'Втулка магн/в'],
    'Термоузел': ['Термоузел'],
    'Лапки': ['Лапки'],
    'Палец': ['Палец'],
    'Чистящее полотенце': ['Чистящее полотенце'],
    'Вал чистящий': ['Вал чистящий'],
    'Вал резиновый': ['Вал резиновый'],
    'Вал тефлоновый': ['Вал тефлоновый', 'Тефлоновый вал'],
    'Пакеты и держатели': ['Пакет', 'Торцевой держатель'],
    'Защитная крышка': ['Защитная крышка', 'Защита барабана'],
    'Защитный разделитель': ['Защитный разделитель', 'Крышка барабана'],
    'Чека': ['Чека', 'Кольцо чеки'],
    'Уплотнитель': ['Уплотнитель'],
    'Комплект переделки': ['Комплект переделки', 'Конверсионный набор', 'Торцевая крышка'],
    'Чип': ['Чип', 'Смарт карта', 'Чип+Шлейф', 'Шлейф для чипов', 'Предохранитель'],
    'Бункер отработанного тонера': ['Бункер для отработанного тонера', 'Бункер для пустого'],
    'Блок проявки': ['Блок проявки'],
    'Модуль формирования': ['Модуль формирования изображения', 'Блок формирования'],
    'Копи-картридж': ['Копи-картридж'],
    'Принт-картридж': ['Принт-картридж'],
    'Блок фотобарабана': ['Блок фотобарабана'],
    'Драм-картридж': ['Драм-картридж', 'Драм-юнит'],
    'Блок девелопера': ['Блок девелопера'],
    'Фоторецептор': ['Фоторецептор'],
    'Лезвие подбора': ['Лезвие подбора'],
    'Вал заряда PCR': ['Вал заряда PCR'],
    'Вал проявки': ['Вал проявки'],
    'Вал магнитный': ['Вал магнитный'],
    'Ролик подачи тонера': ['Ролик подачи тонера'],
    'Ролик очистки CR': ['Ролик очистки CR'],
    'Тонер': ['Тонер', 'Заправочный комплект', 'тонер+девелопер'],
    'Девелопер': ['Девелопер'],
    'Рычаг': ['Рычаг'],
    'Защита чипа': ['Защита чипа'],
}


def get_cat(category):
    for k, v in cats.items():
        if k == category:
            return v


def get_max_copy(text):
    text = re.sub(r'[(]\d*[/]', '(', text.replace(',', ''))
    if re.search(r'[(]\d*.\d*[k][)]', text):
        return int(
            float(re.findall(r'[(]\d*.\d*[k][)]', text)[0].replace('(', '').replace(')', '').replace('k', '')) * 1000)
    else:
        return ''


def get_type(text):
    type = ''
    for k, v in types.items():
        for val in v:
            if val in text:
                type = k
    return type


def get_color(text, option):
    color = ''
    if 'монохром' in option:
        color = 'Black'
    for k, v in colors.items():
        if re.search(r'\s[' + k + ']\s', text):
            color = v
    for k, v in colors_full.items():
        if re.search(k, text):
            color = v

    return color


def format_file():
    if PATH:
        csv_file = PATH + '/bulat/csv/import_price.csv'
    else:
        csv_file = utils.os.getcwd() + '/bulat/csv/import_price.csv'
    fxls = utils.read_file(PATH + '/bulat').to_dict('records')
    df = {'article': [], 'title': [], 'availability': [], 'novelty': [], 'compatibility': [], 'count_box': [],
          'count_pack': [], 'price': [], 'category': [], 'option': [], 'color': [], 'type': [], 'max_copy': []}
    category = ''
    option = ''
    curs = utils.curencies()
    for row in fxls:
        if re.search(r'^[!][!]', str(row['Наименование полное'])):
            option = str(row['Наименование полное']).replace('!!', '').replace('!', '')
        elif re.search(r'^[!]', str(row['Наименование полное'])):
            category = get_cat(re.sub(r'!\d+[.]\W', '', str(row['Наименование полное'])))
        else:
            color = get_color(str(row['Наименование полное']), option)
            type = get_type(str(row['Наименование полное']))
            max_copy = get_max_copy(str(row['Наименование полное']))
            df['article'].append(str(row['Артикул']).strip())
            df['title'].append(str(row['Наименование полное']).strip())
            df['availability'].append(str(row['Наличие']).strip())
            df['novelty'].append(str(row['Новинка']).strip())
            if 'nan' in str(row['Совместимость']):
                df['compatibility'].append('')
            else:
                df['compatibility'].append(str(row['Совместимость']).strip())
            df['count_box'].append(str(row['В коробке']).strip())
            df['count_pack'].append(str(row['В упаковке']).strip())
            if 'nan' in str(row['Цена(USD)']):
                df['price'].append(0)
            else:
                df['price'].append(str(float(row['Цена(USD)'].replace(',', '.')) * curs * 1.2).strip())
            df['category'].append(category)
            df['option'].append(option)
            df['color'].append(color)
            df['type'].append(type)
            df['max_copy'].append(max_copy)

    result = utils.pd.DataFrame(df)
    result.to_csv(csv_file, index=False, sep=';')
    print('Bulat ready')
